import streamlit as st
import pandas as pd
import plotly.express as px

# Fun√ß√£o para exibir a p√°gina de Hist√≥rico
def historico():
    st.markdown("## **O que √© o Petr√≥leo Brent**", unsafe_allow_html=True)

    # Descri√ß√£o breve sobre o Petr√≥leo Brent
    st.write(
        "O petr√≥leo Brent foi batizado assim porque era extra√≠do de uma base da Shell chamada Brent. "
        "Atualmente, a palavra Brent designa todo o petr√≥leo extra√≠do no Mar do Norte e comercializado na Bolsa de Londres. "
        "A cota√ß√£o do Brent desempenha um papel fundamental na economia global, pois influencia diretamente "
        "diversos setores, como os de combust√≠veis, incluindo o diesel e a gasolina, que s√£o derivados do petr√≥leo. "
        "Altera√ß√µes nos pre√ßos de comercializa√ß√£o do Brent impactam diretamente o custo desses produtos, refletindo no "
        "or√ßamento do consumidor final, que pode enfrentar um aumento significativo nos gastos."
    )

    # Caminho do arquivo CSV
    file_path = "data/Base_IPEA.csv"

    try:
        # Carregar os dados
        df = pd.read_csv(file_path, sep=";", encoding="utf-8", engine="python")

        # Normalizar os nomes das colunas
        df.columns = df.columns.str.lower().str.strip()

        # Converter a coluna data para datetime
        df["data"] = pd.to_datetime(df["data"], errors="coerce")

        # Criar uma coluna com o ano
        df["ano"] = df["data"].dt.year

        # Criar lista de anos √∫nicos dispon√≠veis
        anos_disponiveis = sorted(df["ano"].dropna().unique(), reverse=True)

        # Criar um selectbox para o usu√°rio escolher um ano
        st.markdown("### **Varia√ß√£o do pre√ßo:**")
        st.write("Selecione o ano desejado para conferir as varia√ß√µes de pre√ßo do petr√≥leo Brent")
        ano_selecionado = st.selectbox("", ["Todos os anos"] + list(anos_disponiveis))

        # Filtrar os dados pelo ano selecionado
        if ano_selecionado == "Todos os anos":
            df_filtrado = df
        else:
            df_filtrado = df[df["ano"] == ano_selecionado]

        # Calcular estat√≠sticas b√°sicas
        valor_medio = df_filtrado["valor_da_cotacao"].mean()
        valor_maximo = df_filtrado["valor_da_cotacao"].max()
        valor_minimo = df_filtrado["valor_da_cotacao"].min()

        # Exibir estat√≠sticas em tr√™s colunas
        col1, col2, col3 = st.columns(3)
        col1.metric("üìä Valor M√©dio da Cota√ß√£o", f"${valor_medio:,.2f}")
        col2.metric("üìà Valor M√°ximo da Cota√ß√£o", f"${valor_maximo:,.2f}")
        col3.metric("üìâ Valor M√≠nimo da Cota√ß√£o", f"${valor_minimo:,.2f}")

        # Criar o gr√°fico de linha interativo com Plotly
        if "data" in df.columns and "valor_da_cotacao" in df.columns:
            fig = px.line(
                df_filtrado,
                x="data",
                y="valor_da_cotacao",
                title="Hist√≥rico de Cota√ß√£o do Petr√≥leo Brent",
                labels={"valor_da_cotacao": "Valor da Cota√ß√£o (US$)", "data": "Data"},
                line_shape="linear"
            )

            # Aumentar o tamanho do t√≠tulo
            fig.update_layout(
                title=dict(
                    text="Hist√≥rico de Cota√ß√£o do Petr√≥leo Brent",
                    font=dict(
                        size=24,  # Tamanho da fonte
                        family="Arial",  # Fonte do t√≠tulo
                    )
                )
            )

            # Adicionar interatividade (zoom, hover, etc.)
            fig.update_layout(
                xaxis=dict(
                    rangeselector=dict(
                        buttons=[
                            dict(count=1, label="1m", step="month", stepmode="backward"),
                            dict(count=6, label="6m", step="month", stepmode="backward"),
                            dict(count=1, label="1y", step="year", stepmode="backward"),
                            dict(step="all")
                        ]
                    ),
                    rangeslider=dict(visible=True),
                    type="date"
                )
            )

            # Exibir o gr√°fico interativo
            st.plotly_chart(fig, use_container_width=True)

        else:
            st.error("‚ö†Ô∏è Erro: A base de dados n√£o cont√©m as colunas esperadas ('data' e 'valor_da_cotacao').")

    except FileNotFoundError:
        st.error(f"‚ö†Ô∏è Erro: O arquivo `{file_path}` n√£o foi encontrado. Verifique o caminho e tente novamente.")
   
 